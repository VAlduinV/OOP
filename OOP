class Field:
    def __init__(self, value=None):
        self.value = value

    def __str__(self):
        return str(self.value)


class Name(Field):
    pass


class Phone(Field):
    pass


class Record:
    def __init__(self, name, phone):
        self.name = name
        self.phones = [phone]

    def add_phone(self, phone):
        self.phones.append(phone)

    def remove_phone(self, phone):
        for p in self.phones:
            if p.value == phone.value:
                self.phones.remove(p)
                break

    def edit_phone(self, old_phone, new_phone):
        for p in self.phones:
            if p.value == old_phone.value:
                p.value = new_phone.value
                break

    def __str__(self):
        return f"{self.name}: {', '.join([str(p) for p in self.phones])}"


class AddressBook(dict):
    def add_record(self, record):
        key = record.name.value
        self[key] = record

    def __getitem__(self, key):
        return self.get(key)

    def search(self, name=None, phone=None):
        results = []
        for record in self.values():
            if name and name.lower() not in record.name.value.lower():
                continue
            if phone and phone not in [p.value for p in record.phones]:
                continue
            results.append(record)
        return results


if __name__ == '__main__':
    name = Name('Bill')
    phone = Phone('1234567890')
    rec = Record(name, phone)
    ab = AddressBook()
    ab.add_record(rec)
    assert isinstance(ab['Bill'], Record)
    assert isinstance(ab['Bill'].name, Name)
    assert isinstance(ab['Bill'].phones, list)
    assert isinstance(ab['Bill'].phones[0], Phone)
    assert ab['Bill'].phones[0].value == '1234567890'
    print('All Ok)')
